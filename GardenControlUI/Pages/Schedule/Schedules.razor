@page "/scheduler"
@using Models

<div class="row mb-3">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="row">
                    <div class="col-12">
                        <h1 class="card-title">Schedules</h1>
                        <p class="card-text">
                            Schedules allow you to perform certain actions automatically, such as toggling a relay's state, or taking a measurement from a sensor. Multiple actions, on different devices can be performed in a single schedule.
                            The triggering event for a Schedule could be a certain time of day, an interval since the last run time, or at sunrise or sunset. You can also offset the trigger time, for example having a relay toggle
                            15 minutes after sunrise.
                        </p>
                        <div class="btn-group">
                            <a href="scheduler/create" class="btn btn-outline-primary"><span class="oi oi-plus" aria-hidden="true"></span> Add New Schedule</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@if (schedules == null)
{
    <div class="row">
        <div class="col">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="row">
                        <div class="col-12">
                            <p><em>Loading...</em></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
}
else
{
    @foreach (var schedule in schedules)
    {
        <div class="row mb-3">
            <div class="col">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12 col-md-6">
                                <h2 class="card-title">@schedule.Name</h2>
                            </div>
                            <div class="col-12 col-md-6 text-md-right">
                                <a href="#" class="btn btn-primary"><span class="oi oi-media-play" aria-hidden="true"></span> Run Now</a> <a href="/scheduler/edit/@schedule.ScheduleId" class="btn btn-primary"><span class="oi oi-pencil" aria-hidden="true"></span> Edit</a> <a class="btn btn-danger"><span class="oi oi-delete" aria-hidden="true"></span> Delete</a>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 col-md-6">
                                <p>Trigger Type: @schedule.TriggerType</p>
                                <p>Trigger</p>
                                <p>Next Run Time: @schedule.NextRunTime</p>
                                <p>Is Active: @schedule.IsActive</p>
                            </div>
                            <div class="col-sm-12 col-md-6">
                                <h3>Tasks</h3>
                                <p>Count: @schedule.TaskCount</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private ICollection<ScheduleViewModel> schedules;
    private ICollection<TriggerTypeDto> triggerTypes;

    protected override async Task OnInitializedAsync()
    {
        swaggerClient client = new(Configuration["APIBaseUrl"], Http);
        triggerTypes = await client.TriggerTypeAllAsync();

        var scheduleData = await client.ScheduleAllAsync();

        schedules = new List<ScheduleViewModel>();

        foreach (var schedule in scheduleData)
        {
            schedules.Add(new ScheduleViewModel
            {
                ScheduleId = schedule.ScheduleId,
                Name = schedule.Name,
                TriggerType = triggerTypes.Where(tt => (TriggerType)tt.Id == schedule.TriggerTypeId).SingleOrDefault().Name,
                Trigger = "",
                TaskCount = schedule.ScheduleTasks.Count,
                NextRunTime = schedule.NextRunDateTime.DateTime,
                IsActive = schedule.IsActive
            });
        }

    }
}
