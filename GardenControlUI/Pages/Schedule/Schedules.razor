@page "/scheduler"

@using Models

@inject IJSRuntime JSRuntime

<div class="row mb-3">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="row">
                    <div class="col-12">
                        <h1 class="card-title">Schedules</h1>
                        <p class="card-text">
                            Schedules allow you to perform certain actions automatically, such as toggling a relay's state, or taking a measurement from a sensor. Multiple actions, on different devices can be performed in a single schedule.
                            The triggering event for a Schedule could be a certain time of day, an interval since the last run time, or at sunrise or sunset. You can also offset the trigger time, for example having a relay toggle
                            15 minutes after sunrise.
                        </p>
                        <div class="btn-group">
                            <button class="btn btn-outline-success" @onclick="RefreshSchedules"><span class="oi oi-reload" aria-hidden="true"></span> Refresh</button><a href="scheduler/create" class="btn btn-outline-primary"><span class="oi oi-plus" aria-hidden="true"></span> Add New Schedule</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@if (schedules == null)
{
    <div class="row">
        <div class="col">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="row">
                        <div class="col-12">
                            <p><em>Loading...</em></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}
else
{
    @foreach (var schedule in schedules)
    {
        <div class="row mb-3">
            <div class="col">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12 col-md-6">
                                <h3 class="card-title">@schedule.Name</h3>
                            </div>
                            <div class="col-12 col-md-6 text-md-right">
                                <div class="btn-group" role="group">
                                    <button class="btn btn-outline-success" @onclick="() => RunScheduleNow(schedule)" title="Run Now"><span class="oi oi-media-play" aria-hidden="true"></span> Run Now</button><a href="/scheduler/edit/@schedule.ScheduleId" class="btn btn-outline-secondary" title="Edit"><span class="oi oi-pencil" aria-hidden="true"></span> Edit</a><button class="btn btn-outline-danger" @onclick="() => DeleteSchedule(schedule)" title="Delete"><span class="oi oi-delete" aria-hidden="true"></span> Delete</button>
                                </div>
                                
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 col-md-6">
                                <p>Trigger Type: @schedule.TriggerType</p>
                                <p>Trigger</p>
                                <p>Next Run Time: @schedule.NextRunDateTime</p>
                                <p>Is Active: @schedule.IsActive</p>
                            </div>
                            <div class="col-sm-12 col-md-6">
                                <h4>Tasks</h4>
                                @if (!schedule.ScheduleTasks.Any())
                                {
                                    <p>None</p>
                                }
                                else
                                {
                                    <div class="table-responsive">
                                        <table class="table table-sm">
                                            <thead>
                                                <tr>
                                                    <th>Device</th>
                                                    <th>Type</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            @foreach(var scheduleTask in schedule.ScheduleTasks.Where(x => x.IsActive))
                                            {
                                            <tr>
                                                <td>@scheduleTask.ControlDevice.Alias</td>
                                                <td>@scheduleTask.ControlDevice.DeviceTypeId</td>
                                                <td>@TaskActions.Where(x => x.TaskActionId == scheduleTask.TaskAction.TaskActionId).FirstOrDefault().Name</td>
                                            </tr>
                                            }
                                        </table>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private ICollection<Schedule> schedules;
    private ICollection<TriggerTypeDto> triggerTypes;
    private ICollection<TaskAction> TaskActions;

    protected override async Task OnInitializedAsync()
    {
        swaggerClient client = new(Configuration["APIBaseUrl"], Http);
        triggerTypes = await client.TriggerTypeGetAllAsync();

        schedules = await client.ScheduleGetAllAsync();

        TaskActions = await client.TaskActionGetAllAsync();
    }

    private async Task RefreshSchedules()
    {
        swaggerClient client = new(Configuration["APIBaseUrl"], Http);
        triggerTypes = await client.TriggerTypeGetAllAsync();

        schedules = await client.ScheduleGetAllAsync();
        this.StateHasChanged();
    }

    private async Task RunScheduleNow(Schedule schedule)
    {
        swaggerClient client = new(Configuration["APIBaseUrl"], Http);

        try
        {
            await client.ScheduleRunNowByIdAsync(schedule.ScheduleId);
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            schedules = await client.ScheduleGetAllAsync();
            this.StateHasChanged();
        }
    }

    private async Task DeleteSchedule(Schedule schedule)
    {
        if (!await JSRuntime.Confirm($"Are you sure you want to delete the Schedule \"{schedule.Name}\"?"))
            return;

        swaggerClient client = new(Configuration["APIBaseUrl"], Http);

        try
        {
            await client.ScheduleDeleteAsync(schedule.ScheduleId);
            schedules.Remove(schedule);
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            this.StateHasChanged();
        }
    }
}
