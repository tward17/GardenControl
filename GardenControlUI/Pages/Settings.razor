@page "/settings"

<h1>Settings</h1>

@if (appSettings == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Key</th>
                <th>Value</th>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var setting in appSettings.OrderBy(s => s.Key))
            {
                if (updatingSetting != null && setting.Key == updatingSetting.Key)
                {
                    <tr>
                        <td>@setting.Key</td>
                        <td><input type="text" @bind="updatingSetting.Value" /></td>
                        <td class="text-right"><button @onclick="SaveSetting" class="btn btn-primary">Save</button> <button @onclick="CancelUpdateSetting" class="btn btn-secondary">Cancel</button></td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@setting.Key</td>
                        <td>@setting.Value</td>
                        <td class="text-right"><a @onclick="@(() => UpdateSetting(setting.AppSettingId))"><span class="oi oi-pencil" aria-hidden="true"></span></a> <a @onclick="@(() => DeleteSetting(setting.AppSettingId))"><span class="oi oi-delete" aria-hidden="true"></span></a></td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <div>
        Insert New Setting:
        <input placeholder="Key" @bind="newSettingKey" />
        <input placeholder="Value" @bind="newSettingValue" />
        <button @onclick="AddSetting" class="btn btn-primary">Add</button>
    </div>
    
}


@code {
    private ICollection<AppSettingDto> appSettings;
    private string newSettingKey;
    private string newSettingValue;
    private AppSettingDto updatingSetting = null;

    protected override async Task OnInitializedAsync()
    {
        swaggerClient client = new(Configuration["APIBaseUrl"], Http);
        appSettings = await client.AppSettingsAllAsync();
    }

    private async void AddSetting()
    {
        if (string.IsNullOrWhiteSpace(newSettingKey) || string.IsNullOrWhiteSpace(newSettingValue))
        {
            return;
        }

        var newAppSettingDto = new AppSettingDto { Key = newSettingKey, Value = newSettingValue };

        swaggerClient client = new(Configuration["APIBaseUrl"], Http);

        try
        {
            await client.AppSettingsAsync(newAppSettingDto);
            appSettings.Add(newAppSettingDto);
            newSettingKey = "";
            newSettingValue = "";
        }
        catch (Exception ex)
        {

        }
        finally
        {
            this.StateHasChanged();
        }
    }

    private async void UpdateSetting(int id)
    {
        updatingSetting = appSettings.Where(s => s.AppSettingId == id).Single();
        this.StateHasChanged();
    }

    private async void SaveSetting()
    {
        swaggerClient client = new(Configuration["APIBaseUrl"], Http);
        try
        {
            await client.AppSettings3Async(updatingSetting.AppSettingId, updatingSetting);
            updatingSetting = null;
        }
        catch (Exception)
        {

            throw;
        }
        finally { this.StateHasChanged(); }
    }

    private async void CancelUpdateSetting()
    {
        updatingSetting = null;
        this.StateHasChanged();
    }

    private async void DeleteSetting(int id)
    {
        swaggerClient client = new(Configuration["APIBaseUrl"], Http);
        try
        {
            await client.AppSettings4Async(id);
            appSettings.Remove(appSettings.Where(a => a.AppSettingId == id).Single());
        }
        catch (Exception ex)
        {

            throw;
        }
        finally
        {
            this.StateHasChanged();
        }

    }
}
