@page "/settings"
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col-12">
        <div class="card shadow-sm">
            <div class="card-body">
                <h1 class="card-title">Settings</h1>
                <p class="card-text">This section allows you to update certain system settings. Changing these values can cause the application to break, so make sure you know what you are doing!</p>
                @if (appSettings == null)
                {
                    <p><em>Loading...</em></p> }
                else
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Key</th>
                                <th>Value</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var setting in appSettings.OrderBy(s => s.Key))
                            {
                                if (updatingSetting != null && setting.Key == updatingSetting.Key)
                                {
                                    <tr>
                                        <td>@setting.Key</td>
                                        <td><input type="text" @bind="updatingSetting.Value" /></td>
                                        <td class="text-right"><button @onclick="SaveSetting" class="btn btn-outline-primary">Save</button> <button @onclick="CancelUpdateSetting" class="btn btn-outline-secondary">Cancel</button></td>
                                    </tr> 
                                }
                                else
                                {
                                    <tr>
                                        <td>@setting.Key</td>
                                        <td>@setting.Value</td>
                                        <td class="text-right"><button class="btn btn-outline-secondary" @onclick="@(() => UpdateSetting(setting))"><span class="oi oi-pencil" aria-hidden="true"></span></button> <button class="btn btn-outline-danger" @onclick="@(() => DeleteSetting(setting))"><span class="oi oi-delete" aria-hidden="true"></span></button></td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>

                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="basic-addon1">Insert New Setting</span>
                        </div>
                        <input class="form-control" placeholder="Key" @bind="newSettingKey" />
                        <input class="form-control" placeholder="Value" @bind="newSettingValue" />
                        <div class="input-group-append">
                            <button @onclick="AddSetting" class="btn btn-outline-primary">Add</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>



@code { private ICollection<AppSettingDto> appSettings;
    private string newSettingKey;
    private string newSettingValue;
    private AppSettingDto updatingSetting = null;

    protected override async Task OnInitializedAsync()
    {
        swaggerClient client = new(Configuration["APIBaseUrl"], Http);
        appSettings = await client.AppSettingGetAllAsync();
    }

    private async void AddSetting()
    {
        if (string.IsNullOrWhiteSpace(newSettingKey) || string.IsNullOrWhiteSpace(newSettingValue))
        {
            return;
        }

        var newAppSettingDto = new AppSettingDto { Key = newSettingKey, Value = newSettingValue };

        swaggerClient client = new(Configuration["APIBaseUrl"], Http);

        try
        {
            await client.AppSettingInsertAsync(newAppSettingDto);
            appSettings.Add(newAppSettingDto);
            newSettingKey = "";
            newSettingValue = "";
        }
        catch (Exception ex)
        {

        }
        finally
        {
            this.StateHasChanged();
        }
    }

    private async void UpdateSetting(AppSettingDto appSetting)
    {
        updatingSetting = appSetting;
        this.StateHasChanged();
    }

    private async void SaveSetting()
    {
        swaggerClient client = new(Configuration["APIBaseUrl"], Http);
        try
        {
            await client.AppSettingUpdateAsync(updatingSetting.AppSettingId, updatingSetting);
            updatingSetting = null;
        }
        catch (Exception)
        {

            throw;
        }
        finally { this.StateHasChanged(); }
    }

    private async void CancelUpdateSetting()
    {
        updatingSetting = null;
        this.StateHasChanged();
    }

    private async void DeleteSetting(AppSettingDto appSetting)
    {
        if (!await JSRuntime.Confirm($"Are you sure you want to delete the Setting \"{appSetting.Key}\"?"))
            return;

        swaggerClient client = new(Configuration["APIBaseUrl"], Http);
        try
        {
            await client.AppSettingDeleteAsync(appSetting.AppSettingId);
            appSettings.Remove(appSetting);
        }
        catch (Exception ex)
        {

            throw;
        }
        finally
        {
            this.StateHasChanged();
        }

    } }
