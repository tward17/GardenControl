@page "/videofeeds"

@using Models

@inject IJSRuntime JSRuntime

<div class="row mb-3">
    <div class="col">
        <div class="card shadow-sm">
            <div class="card-body">
                <div class="row">
                    <div class="col-12">
                        <h1 class="card-title">Video Feeds</h1>
                        <p class="card-text">
                            Add addresses of video feeds so that they can be inserted into an iFrame on the page.
                        </p>
                        <div class="btn-group">
                            <a href="videofeeds/create" class="btn btn-outline-primary"><span class="oi oi-plus" aria-hidden="true"></span> Add New Video Feed</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (videoFeeds == null)
{
    <div class="row">
        <div class="col">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="row">
                        <div class="col-12">
                            <p><em>Loading...</em></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    @foreach (var videoFeed in videoFeeds)
    {
        <div class="row mb-3">
            <div class="col">
                <div class="card shadow-sm">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12 col-md-6">
                                <h3 class="card-title">@videoFeed.Name</h3>
                            </div>
                            <div class="col-12 col-md-6 text-md-right">
                                <div class="btn-group" role="group">
                                    <a href="/videofeeds/edit/@videoFeed.VideoFeedId" class="btn btn-outline-secondary" title="Edit"><span class="oi oi-pencil" aria-hidden="true"></span> Edit</a><button class="btn btn-outline-danger" @onclick="() => DeleteVideoFeed(videoFeed)" title="Delete"><span class="oi oi-delete" aria-hidden="true"></span> Delete</button>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12 col-md-6 order-1 order-sm-2 order-md-1">
                                <dl>
                                    <dt>Address</dt>
                                    <dd>@videoFeed.FeedUrl</dd>
                                    <dt>Description</dt>
                                    <dd>@videoFeed.Description</dd>
                                    <dt>Is Active</dt>
                                    <dd>@videoFeed.IsActive</dd>
                                </dl>
                            </div>
                            <div class="col-sm-12 col-md-6 order-2 order-sm-1 order-md-2">
                                <div class="embed-responsive embed-responsive-16by9">
                                    <iframe class="embed-responsive-item" src="@videoFeed.FeedUrl"></iframe>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code{
    private ICollection<VideoFeed> videoFeeds;

    protected override async Task OnInitializedAsync()
    {
        swaggerClient client = new(Configuration["APIBaseUrl"], Http);

        videoFeeds= await client.VideoFeedsGetAllAsync();
    }

    private async Task DeleteVideoFeed(VideoFeed videoFeed)
    {
        if (!await JSRuntime.Confirm($"Are you sure you want to delete the Video Feed \"{videoFeed.Name}\"?"))
            return;

        swaggerClient client = new(Configuration["APIBaseUrl"], Http);

        try
        {
            client.ScheduleDeleteAsync(videoFeed.VideoFeedId);
            videoFeeds.Remove(videoFeed);
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            this.StateHasChanged();
        }
    }
}