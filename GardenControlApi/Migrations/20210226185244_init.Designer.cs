// <auto-generated />
using System;
using GardenControlRepositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GardenControlApi.Migrations
{
    [DbContext(typeof(GardenControlContext))]
    [Migration("20210226185244_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("GardenControlRepositories.Entities.AppSettingEntity", b =>
                {
                    b.Property<int>("AppSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanBeUpdated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AppSettingId");

                    b.ToTable("AppSetting");
                });

            modelBuilder.Entity("GardenControlRepositories.Entities.ControlDeviceEntity", b =>
                {
                    b.Property<int>("ControlDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("DefaultState")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GPIOPinNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("ControlDeviceId");

                    b.ToTable("ControlDevice");
                });

            modelBuilder.Entity("GardenControlRepositories.Entities.MeasurementEntity", b =>
                {
                    b.Property<long>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlDeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MeasurementDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeasurementUnit")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MeasurementValue")
                        .HasColumnType("REAL");

                    b.HasKey("MeasurementId");

                    b.HasIndex("ControlDeviceId");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("GardenControlRepositories.Entities.ScheduleEntity", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IntervalAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IntervalAmountTimeIntervalUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NextRunDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TriggerOffsetAmount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TriggerOffsetAmountTimeIntervalUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("TriggerTimeOfDay")
                        .HasColumnType("TEXT");

                    b.Property<int>("TriggerTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("GardenControlRepositories.Entities.ScheduleTaskEntity", b =>
                {
                    b.Property<int>("ScheduleTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlDeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskActionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ScheduleTaskId");

                    b.HasIndex("ControlDeviceId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ScheduleTask");
                });

            modelBuilder.Entity("GardenControlRepositories.Entities.MeasurementEntity", b =>
                {
                    b.HasOne("GardenControlRepositories.Entities.ControlDeviceEntity", "ControlDeviceEntity")
                        .WithMany()
                        .HasForeignKey("ControlDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlDeviceEntity");
                });

            modelBuilder.Entity("GardenControlRepositories.Entities.ScheduleTaskEntity", b =>
                {
                    b.HasOne("GardenControlRepositories.Entities.ControlDeviceEntity", "ControlDevice")
                        .WithMany()
                        .HasForeignKey("ControlDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GardenControlRepositories.Entities.ScheduleEntity", "Schedule")
                        .WithMany("ScheduleTasks")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ControlDevice");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("GardenControlRepositories.Entities.ScheduleEntity", b =>
                {
                    b.Navigation("ScheduleTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
